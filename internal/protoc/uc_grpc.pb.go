// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: uc.proto

package protoc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Uc_GetEmailCode_FullMethodName  = "/proto.Uc/GetEmailCode"
	Uc_PostEmailCode_FullMethodName = "/proto.Uc/PostEmailCode"
	Uc_Register_FullMethodName      = "/proto.Uc/Register"
	Uc_Login_FullMethodName         = "/proto.Uc/Login"
	Uc_GetUserInfo_FullMethodName   = "/proto.Uc/GetUserInfo"
)

// UcClient is the client API for Uc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UcClient interface {
	// 获取邮箱注册验证码
	GetEmailCode(ctx context.Context, in *GetEmailCodeReq, opts ...grpc.CallOption) (*UcRsp, error)
	// 校验邮箱注册验证码
	PostEmailCode(ctx context.Context, in *PostEmailCodeReq, opts ...grpc.CallOption) (*UcRsp, error)
	// 注册
	Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*LoginRsp, error)
	// 登录
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginRsp, error)
	// 获取个人信息
	GetUserInfo(ctx context.Context, in *GetUserInfoReq, opts ...grpc.CallOption) (*GetUserInfoRsp, error)
}

type ucClient struct {
	cc grpc.ClientConnInterface
}

func NewUcClient(cc grpc.ClientConnInterface) UcClient {
	return &ucClient{cc}
}

func (c *ucClient) GetEmailCode(ctx context.Context, in *GetEmailCodeReq, opts ...grpc.CallOption) (*UcRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UcRsp)
	err := c.cc.Invoke(ctx, Uc_GetEmailCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ucClient) PostEmailCode(ctx context.Context, in *PostEmailCodeReq, opts ...grpc.CallOption) (*UcRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UcRsp)
	err := c.cc.Invoke(ctx, Uc_PostEmailCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ucClient) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*LoginRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginRsp)
	err := c.cc.Invoke(ctx, Uc_Register_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ucClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginRsp)
	err := c.cc.Invoke(ctx, Uc_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ucClient) GetUserInfo(ctx context.Context, in *GetUserInfoReq, opts ...grpc.CallOption) (*GetUserInfoRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserInfoRsp)
	err := c.cc.Invoke(ctx, Uc_GetUserInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UcServer is the server API for Uc service.
// All implementations must embed UnimplementedUcServer
// for forward compatibility
type UcServer interface {
	// 获取邮箱注册验证码
	GetEmailCode(context.Context, *GetEmailCodeReq) (*UcRsp, error)
	// 校验邮箱注册验证码
	PostEmailCode(context.Context, *PostEmailCodeReq) (*UcRsp, error)
	// 注册
	Register(context.Context, *RegisterReq) (*LoginRsp, error)
	// 登录
	Login(context.Context, *LoginReq) (*LoginRsp, error)
	// 获取个人信息
	GetUserInfo(context.Context, *GetUserInfoReq) (*GetUserInfoRsp, error)
	mustEmbedUnimplementedUcServer()
}

// UnimplementedUcServer must be embedded to have forward compatible implementations.
type UnimplementedUcServer struct {
}

func (UnimplementedUcServer) GetEmailCode(context.Context, *GetEmailCodeReq) (*UcRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmailCode not implemented")
}
func (UnimplementedUcServer) PostEmailCode(context.Context, *PostEmailCodeReq) (*UcRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostEmailCode not implemented")
}
func (UnimplementedUcServer) Register(context.Context, *RegisterReq) (*LoginRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedUcServer) Login(context.Context, *LoginReq) (*LoginRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedUcServer) GetUserInfo(context.Context, *GetUserInfoReq) (*GetUserInfoRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfo not implemented")
}
func (UnimplementedUcServer) mustEmbedUnimplementedUcServer() {}

// UnsafeUcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UcServer will
// result in compilation errors.
type UnsafeUcServer interface {
	mustEmbedUnimplementedUcServer()
}

func RegisterUcServer(s grpc.ServiceRegistrar, srv UcServer) {
	s.RegisterService(&Uc_ServiceDesc, srv)
}

func _Uc_GetEmailCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEmailCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UcServer).GetEmailCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Uc_GetEmailCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UcServer).GetEmailCode(ctx, req.(*GetEmailCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uc_PostEmailCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostEmailCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UcServer).PostEmailCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Uc_PostEmailCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UcServer).PostEmailCode(ctx, req.(*PostEmailCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uc_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UcServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Uc_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UcServer).Register(ctx, req.(*RegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uc_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UcServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Uc_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UcServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uc_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UcServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Uc_GetUserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UcServer).GetUserInfo(ctx, req.(*GetUserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Uc_ServiceDesc is the grpc.ServiceDesc for Uc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Uc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Uc",
	HandlerType: (*UcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEmailCode",
			Handler:    _Uc_GetEmailCode_Handler,
		},
		{
			MethodName: "PostEmailCode",
			Handler:    _Uc_PostEmailCode_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _Uc_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _Uc_Login_Handler,
		},
		{
			MethodName: "GetUserInfo",
			Handler:    _Uc_GetUserInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "uc.proto",
}
