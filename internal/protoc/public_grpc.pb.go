// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: public.proto

package protoc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Public_GetCaptcha_FullMethodName  = "/proto.Public/GetCaptcha"
	Public_PostCaptcha_FullMethodName = "/proto.Public/PostCaptcha"
	Public_GetCountry_FullMethodName  = "/proto.Public/GetCountry"
)

// PublicClient is the client API for Public service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PublicClient interface {
	// 获取人机校验接口
	GetCaptcha(ctx context.Context, in *PublicReq, opts ...grpc.CallOption) (*GetCaptchaRsp, error)
	// 人机校验校验接口
	PostCaptcha(ctx context.Context, in *PostCaptchaReq, opts ...grpc.CallOption) (*PublicRsp, error)
	// 获取国家列表接口
	GetCountry(ctx context.Context, in *PublicReq, opts ...grpc.CallOption) (*GetCountryRsp, error)
}

type publicClient struct {
	cc grpc.ClientConnInterface
}

func NewPublicClient(cc grpc.ClientConnInterface) PublicClient {
	return &publicClient{cc}
}

func (c *publicClient) GetCaptcha(ctx context.Context, in *PublicReq, opts ...grpc.CallOption) (*GetCaptchaRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCaptchaRsp)
	err := c.cc.Invoke(ctx, Public_GetCaptcha_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicClient) PostCaptcha(ctx context.Context, in *PostCaptchaReq, opts ...grpc.CallOption) (*PublicRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PublicRsp)
	err := c.cc.Invoke(ctx, Public_PostCaptcha_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicClient) GetCountry(ctx context.Context, in *PublicReq, opts ...grpc.CallOption) (*GetCountryRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCountryRsp)
	err := c.cc.Invoke(ctx, Public_GetCountry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PublicServer is the server API for Public service.
// All implementations must embed UnimplementedPublicServer
// for forward compatibility
type PublicServer interface {
	// 获取人机校验接口
	GetCaptcha(context.Context, *PublicReq) (*GetCaptchaRsp, error)
	// 人机校验校验接口
	PostCaptcha(context.Context, *PostCaptchaReq) (*PublicRsp, error)
	// 获取国家列表接口
	GetCountry(context.Context, *PublicReq) (*GetCountryRsp, error)
	mustEmbedUnimplementedPublicServer()
}

// UnimplementedPublicServer must be embedded to have forward compatible implementations.
type UnimplementedPublicServer struct {
}

func (UnimplementedPublicServer) GetCaptcha(context.Context, *PublicReq) (*GetCaptchaRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCaptcha not implemented")
}
func (UnimplementedPublicServer) PostCaptcha(context.Context, *PostCaptchaReq) (*PublicRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostCaptcha not implemented")
}
func (UnimplementedPublicServer) GetCountry(context.Context, *PublicReq) (*GetCountryRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCountry not implemented")
}
func (UnimplementedPublicServer) mustEmbedUnimplementedPublicServer() {}

// UnsafePublicServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PublicServer will
// result in compilation errors.
type UnsafePublicServer interface {
	mustEmbedUnimplementedPublicServer()
}

func RegisterPublicServer(s grpc.ServiceRegistrar, srv PublicServer) {
	s.RegisterService(&Public_ServiceDesc, srv)
}

func _Public_GetCaptcha_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServer).GetCaptcha(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Public_GetCaptcha_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServer).GetCaptcha(ctx, req.(*PublicReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Public_PostCaptcha_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostCaptchaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServer).PostCaptcha(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Public_PostCaptcha_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServer).PostCaptcha(ctx, req.(*PostCaptchaReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Public_GetCountry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServer).GetCountry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Public_GetCountry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServer).GetCountry(ctx, req.(*PublicReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Public_ServiceDesc is the grpc.ServiceDesc for Public service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Public_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Public",
	HandlerType: (*PublicServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCaptcha",
			Handler:    _Public_GetCaptcha_Handler,
		},
		{
			MethodName: "PostCaptcha",
			Handler:    _Public_PostCaptcha_Handler,
		},
		{
			MethodName: "GetCountry",
			Handler:    _Public_GetCountry_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "public.proto",
}
